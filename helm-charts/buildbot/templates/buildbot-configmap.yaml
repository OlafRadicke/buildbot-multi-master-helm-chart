{{ $global := . }}
apiVersion: v1
kind: ConfigMap
metadata:
    name: buildbot-config
data:
    buildbot_tac: |
        import os
        import sys
        
        from twisted.application import service
        from twisted.python.log import FileLogObserver
        from twisted.python.log import ILogObserver
        
        from buildbot.master import BuildMaster
        
        basedir = os.environ.get("BUILDBOT_BASEDIR",
            os.path.abspath(os.path.dirname(__file__)))
        configfile = 'master.cfg'
        
        # note: this line is matched against to check that this is a buildmaster
        # directory; do not edit it.
        application = service.Application('buildmaster')
        application.setComponent(ILogObserver, FileLogObserver(sys.stdout).emit)
        
        m = BuildMaster(basedir, configfile, umask=None)
        m.setServiceParent(application)
    
    start_buildbot_sh: |
        #!/bin/sh
        B=`pwd`
        echo "##########  config value begin ##############"
        cat $B/master.cfg
        echo "##########  config value end ################"
        rm -f $B/twistd.pid
        # Debug info:
        printenv
        until buildbot upgrade-master $B
        do
            echo "Can't upgrade master yet. Waiting for database ready?"
            sleep 1
        done
        exec twistd -ny $B/buildbot.tac

    master_cfg: |
        # -*- python -*-
        # Added by configMap
        import os
        from buildbot.plugins import *
        c = BuildmasterConfig = {}
        c['title'] = "buildbot_fake_project"
        c['titleURL'] = "https://github.com/OlafRadicke/buildbot_fake_project_repo/blob/master/README.md"
        c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")
        c['buildbotNetUsageData'] = 'basic'
        c['www'] = dict(
            port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
            plugins=dict(waterfall_view={}, console_view={}))
        if 'BUILDBOT_MQ_URL' in os.environ:
            c['mq'] = {
                'type' : 'wamp',
                'router_url': os.environ['BUILDBOT_MQ_URL'],
                'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot'),
                'wamp_debug_level': os.environ.get('BUILDBOT_MQ_DEBUG', 'info')
            }
        c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

        c['change_source'] = []
        c['change_source'].append(
            changes.GitPoller(
                {{ $global.Values.pollURL | quote }},
                workdir='gitpoller-workdir', 
                branch='master',
                pollinterval={{ $global.Values.pollInterval }}
            )
        )

        c['workers'] = []
{{- range  $key, $val :=  .Values.wortkerTypes }}
        c['workers'].append(
            worker.Worker(
                {{ $key  | quote }}, 
                {{ $val.password  | quote }}
            )
        )
{{- end }}

        f = {}
        factory = util.BuildFactory()
        factory.addStep(
            steps.Git(
                repourl='https://github.com/OlafRadicke/buildbot_fake_project_repo.git', 
                mode='incremental'
            )
        )
        factory.addStep(
            steps.ShellCommand(
                command=["sh", "./script/bootstrap"]
            )
        )
        factory.addStep(
            steps.ShellCommand(
                command=["sh", "./script/cibuild"]
            )
        )

        c['builders'] = []
{{- range  $key, $val :=  .Values.wortkerTypes }}        
        c['builders'].append(
            util.BuilderConfig(
                name={{ $key  | quote }},
                workernames=[{{ $key  | quote }}],
                factory=factory
            )
        )
{{- end }}
        c['schedulers'] = []
{{- range  $key, $val :=  .Values.wortkerTypes }}       
        c['schedulers'].append(
            schedulers.SingleBranchScheduler(
                name={{ $key  | quote }},
                change_filter=util.ChangeFilter(branch='master'),
                treeStableTimer=None,
                builderNames=[{{ $key  | quote }}]
            )
        )
{{- end }}
        c['db_url'] = os.environ.get("BUILDBOT_DB_URL", "sqlite://")

      
